name: main

on:
    push:
        branches:
            - main
        tags:
            - "**"
    pull_request:
        branches:
            - main

jobs:
    context:
        name: context
        runs-on: ubuntu-latest
        steps:
            - name: Dump GitHub context
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
              run: echo "${GITHUB_CONTEXT}"
            - name: Dump job context
              env:
                  JOB_CONTEXT: ${{ toJson(job) }}
              run: echo "${JOB_CONTEXT}"
            - name: Dump steps context
              env:
                  STEPS_CONTEXT: ${{ toJson(steps) }}
              run: echo "${STEPS_CONTEXT}"
            - name: Dump runner context
              env:
                  RUNNER_CONTEXT: ${{ toJson(runner) }}
              run: echo "${RUNNER_CONTEXT}"
            - name: Dump strategy context
              env:
                  STRATEGY_CONTEXT: ${{ toJson(strategy) }}
              run: echo "${STRATEGY_CONTEXT}"
            - name: Dump matrix context
              env:
                  MATRIX_CONTEXT: ${{ toJson(matrix) }}
              run: echo "${MATRIX_CONTEXT}"

    python:
        strategy:
            matrix:
                os: [ubuntu-latest]
                python: [3.12]

        name: python ${{ matrix.python }}
        runs-on: ${{ matrix.os }}
        env:
            ENVIRONMENT: ci
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Poetry
              run: |
                  pipx install poetry
                  poetry config virtualenvs.in-project true

            - name: Set up Python
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python }}
                  cache: poetry

            - name: Poetry cache
              if: ${{ steps.setup-python.outputs.cache-hit != 'true' }}
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pypoetry
                  key: pypoetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      pypoetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
                      pypoetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}
                      pypoetry-${{ runner.os }}

            - name: Install dependencies
              run: poetry install --no-interaction

            - name: Lint and test
              run: |
                  source $(poetry env info --path)/bin/activate
                  make lint test

    docker:
        name: docker
        runs-on: ubuntu-latest
        env:
            ENVIRONMENT: prod
            IMAGE_TAG: ${{ github.ref_name }}
        steps:
            - name: Dump GitHub context
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
              run: echo "${GITHUB_CONTEXT}"

            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Docker CI
              run: |
                  touch .env
                  ENVIRONMENT=ci make dc-ci

            - name: Docker metadata
              id: docker_metadata
              uses: docker/metadata-action@v5
              with:
                  images: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
                      ghcr.io/${{ github.repository }}

            - name: Login to Docker Hub
              if: ${{ github.event_name != 'pull_request' }}
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to GHCR
              if: ${{ github.event_name != 'pull_request' }}
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push dev image
              uses: docker/build-push-action@v5
              with:
                  target: dev
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:dev
                      ghcr.io/${{ github.repository }}:dev
                  labels: ${{ steps.docker_metadata.outputs.labels }}
                  annotations: ${{ steps.docker_metadata.outputs.annotations }}
                  push: ${{ github.event_name != 'pull_request' }}
                  cache-from: |
                      type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:dev
                      type=registry,ref=ghcr.io/${{ github.repository }}:dev
                      type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cache
                      type=registry,ref=ghcr.io/${{ github.repository }}:cache
                  cache-to: type=inline

            - name: Build and push prod image
              if: ${{ github.event_name != 'pull_request' }}
              uses: docker/build-push-action@v5
              with:
                  tags: ${{ steps.docker_metadata.outputs.tags }}
                  labels: ${{ steps.docker_metadata.outputs.labels }}
                  annotations: ${{ steps.docker_metadata.outputs.annotations }}
                  push: true
                  cache-from: |
                      type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:dev
                      type=registry,ref=ghcr.io/${{ github.repository }}:dev
                      type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cache
                      type=registry,ref=ghcr.io/${{ github.repository }}:cache
                  cache-to: |
                      type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cache,mode=max
                      type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max
